{"ast":null,"code":"import _asyncToGenerator from \"/Users/magana272/Desktop/pp/wordle/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport React from 'react';\nimport Words from './word.txt';\nexport var DefaultBorad = [[\" \", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"]];\nexport function guessFunc(guess, correct_word) {\n  var guess_answer = [];\n\n  for (var i = 0; 0 < correct_word.length; i++) {\n    if (guess[i] === correct_word[i]) {\n      guess_answer.push(1);\n    } else if (guess.includes(guess[i])) {\n      guess_answer.push(2);\n    } else {\n      guess.push(2);\n    }\n  }\n\n  return guess_answer;\n}\nexport function guessing(word) {\n  if (word === \"xxxxx\") {\n    return \"Daisy. -Your Bug 🌷\";\n  }\n\n  return \"xxxxx\";\n}\nexport var get_randomWord = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var wordSet, random_word, DefaultBorad;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(Words).then(function (response) {\n              return response.text();\n            }).then(function (results) {\n              var wordarr = results.split(\"\\n\");\n              random_word = wordarr[Math.floor(Math.random() * wordarr.length)];\n              wordSet = new Set(wordarr);\n              DefaultBorad = [[\" \", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\", \"\"]];\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", {\n              wordSet: wordSet,\n              random_word: random_word\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function get_randomWord() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["React","Words","DefaultBorad","guessFunc","guess","correct_word","guess_answer","i","length","push","includes","guessing","word","get_randomWord","fetch","then","response","text","results","wordarr","split","random_word","Math","floor","random","wordSet","Set"],"sources":["/Users/magana272/Desktop/pp/wordle/my-app/src/Word.js"],"sourcesContent":["import React from 'react'\nimport Words from './word.txt'\nexport const DefaultBorad = [\n    [\" \",\"\",\"\",\"\",\"\"],\n    [\"\",\"\",\"\",\"\",\"\"],\n    [\"\",\"\",\"\",\"\",\"\"],\n    [\"\",\"\",\"\",\"\",\"\"],\n    [\"\",\"\",\"\",\"\",\"\"],\n    [\"\",\"\",\"\",\"\",\"\"]];\n\nexport function guessFunc(guess, correct_word){\n    let guess_answer = [];\n    for( let i = 0 ; 0 < correct_word.length; i++){\n        if (guess[i]===correct_word[i]){\n            guess_answer.push(1)\n        }\n        else if(guess.includes(guess[i])){\n            guess_answer.push(2);\n        }\n        else{\n            guess.push(2);\n        }\n    }\n    return guess_answer\n}\nexport function guessing(word){\n    if (word === \"xxxxx\"){\n      return \"Daisy. -Your Bug 🌷\"}\n    return \"xxxxx\";\n  }\nexport const get_randomWord = async()=>{\n    let wordSet;\n    let random_word;\n    let DefaultBorad;\n    await fetch(Words)\n    .then((response)=> response.text())\n    .then((results)=>{\n        const wordarr = results.split(\"\\n\")\n        random_word = wordarr[Math.floor(Math.random() * wordarr.length)]\n        wordSet = new Set(wordarr)\n        DefaultBorad = [\n            [\" \",\"\",\"\",\"\",\"\"],\n            [\"\",\"\",\"\",\"\",\"\"],\n            [\"\",\"\",\"\",\"\",\"\"],\n            [\"\",\"\",\"\",\"\",\"\"],\n            [\"\",\"\",\"\",\"\",\"\"],\n            [\"\",\"\",\"\",\"\",\"\"]];\n\n    })\n    return {wordSet, random_word};\n}\n"],"mappings":";;+CACA,oJ;;AADA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAO,IAAMC,YAAY,GAAG,CACxB,CAAC,GAAD,EAAK,EAAL,EAAQ,EAAR,EAAW,EAAX,EAAc,EAAd,CADwB,EAExB,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAFwB,EAGxB,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAHwB,EAIxB,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAJwB,EAKxB,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CALwB,EAMxB,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CANwB,CAArB;AAQP,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,YAA1B,EAAuC;EAC1C,IAAIC,YAAY,GAAG,EAAnB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAiB,IAAIF,YAAY,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA8C;IAC1C,IAAIH,KAAK,CAACG,CAAD,CAAL,KAAWF,YAAY,CAACE,CAAD,CAA3B,EAA+B;MAC3BD,YAAY,CAACG,IAAb,CAAkB,CAAlB;IACH,CAFD,MAGK,IAAGL,KAAK,CAACM,QAAN,CAAeN,KAAK,CAACG,CAAD,CAApB,CAAH,EAA4B;MAC7BD,YAAY,CAACG,IAAb,CAAkB,CAAlB;IACH,CAFI,MAGD;MACAL,KAAK,CAACK,IAAN,CAAW,CAAX;IACH;EACJ;;EACD,OAAOH,YAAP;AACH;AACD,OAAO,SAASK,QAAT,CAAkBC,IAAlB,EAAuB;EAC1B,IAAIA,IAAI,KAAK,OAAb,EAAqB;IACnB,OAAO,qBAAP;EAA6B;;EAC/B,OAAO,OAAP;AACD;AACH,OAAO,IAAMC,cAAc;EAAA,sEAAG;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAIpBC,KAAK,CAACb,KAAD,CAAL,CACLc,IADK,CACA,UAACC,QAAD;cAAA,OAAaA,QAAQ,CAACC,IAAT,EAAb;YAAA,CADA,EAELF,IAFK,CAEA,UAACG,OAAD,EAAW;cACb,IAAMC,OAAO,GAAGD,OAAO,CAACE,KAAR,CAAc,IAAd,CAAhB;cACAC,WAAW,GAAGF,OAAO,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,OAAO,CAACX,MAAnC,CAAD,CAArB;cACAiB,OAAO,GAAG,IAAIC,GAAJ,CAAQP,OAAR,CAAV;cACAjB,YAAY,GAAG,CACX,CAAC,GAAD,EAAK,EAAL,EAAQ,EAAR,EAAW,EAAX,EAAc,EAAd,CADW,EAEX,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAFW,EAGX,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAHW,EAIX,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAJW,EAKX,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CALW,EAMX,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CANW,CAAf;YAQH,CAdK,CAJoB;;UAAA;YAAA,iCAmBnB;cAACuB,OAAO,EAAPA,OAAD;cAAUJ,WAAW,EAAXA;YAAV,CAnBmB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAdR,cAAc;IAAA;EAAA;AAAA,GAApB"},"metadata":{},"sourceType":"module"}