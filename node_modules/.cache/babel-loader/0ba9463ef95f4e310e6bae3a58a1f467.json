{"ast":null,"code":"var _jsxFileName = \"/Users/magana272/Desktop/wordle/my-app/src/Component/Key.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { AppContext } from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Key(_ref) {\n  _s();\n\n  let {\n    keyValue,\n    bigKey\n  } = _ref;\n  const {\n    board,\n    setBoard,\n    curAttempt,\n    setCurrAttempt,\n    Word\n  } = useContext(AppContext);\n\n  const selector = () => {\n    const newBoard = [...board];\n\n    if (keyValue == \"Delete\" && curAttempt.letterPos == 0) {\n      ///Try to delete at 0\n      newBoard[curAttempt.attempt][curAttempt.letterPos] = \"\";\n      setBoard(newBoard);\n    } else if (keyValue == \"Delete\" && curAttempt.letterPos != 0) {\n      //Deleteing any other time\n      newBoard[curAttempt.attempt][curAttempt.letterPos] = \"\";\n      setCurrAttempt({ ...curAttempt,\n        letterPos: curAttempt.letterPos - 1\n      });\n      setBoard(newBoard);\n    } else if (keyValue == \"Enter\" && curAttempt.letterPos != 5) {\n      // Not a complete word\n      return;\n    } else if (keyValue == \"Enter\" && curAttempt.letterPos == 5) {\n      // Makeing a guess\n      setCurrAttempt({\n        attempt: curAttempt.attempt + 1,\n        letterPos: 0\n      });\n      setBoard(newBoard); // need to check the guess \n    } else if (keyValue != \"Enter\" && curAttempt.letterPos == 5) {\n      // Fully Spelt Word\n      return;\n    } else {\n      //Entering a new key \n      newBoard[curAttempt.attempt][curAttempt.letterPos] = keyValue;\n      setCurrAttempt({ ...curAttempt,\n        letterPos: curAttempt.letterPos + 1\n      });\n      setBoard(newBoard);\n    }\n  };\n\n  if (attemptValue < curAttempt.attempt) {\n    if (word.word[letterPos] === keyValue) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"key\",\n        id: bigKey && \"big\" && \"correct\",\n        onClick: selector,\n        children: keyValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this);\n    } else if (word.word.slice(letterPos).includes(\"\" + keyValue)) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"key\",\n        id: bigKey && \"big\" && \"almost\",\n        onClick: selector,\n        children: keyValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this);\n    } else if (word.word.slice(letterPos).includes(\"\" + keyValue)) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"key\",\n        id: bigKey && \"big\" && \"error\",\n        onClick: selector,\n        children: keyValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"key\",\n      id: bigKey && \"big\",\n      onClick: selector,\n      children: keyValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Key, \"6ILxw3PXpFGXdJdsQc3g2Xa8Lek=\");\n\n_c = Key;\nexport default Key;\n\nvar _c;\n\n$RefreshReg$(_c, \"Key\");","map":{"version":3,"names":["React","useContext","AppContext","Key","keyValue","bigKey","board","setBoard","curAttempt","setCurrAttempt","Word","selector","newBoard","letterPos","attempt","attemptValue","word","slice","includes"],"sources":["/Users/magana272/Desktop/wordle/my-app/src/Component/Key.js"],"sourcesContent":["import React, {useContext} from \"react\";\nimport {AppContext} from \"../App\"\nfunction Key({keyValue, bigKey}){\n    const {board, setBoard, curAttempt,setCurrAttempt, Word} = useContext(AppContext);\n    const selector  = () =>{\n        const newBoard = [...board];\n        if (keyValue == \"Delete\" && curAttempt.letterPos==0){\n            ///Try to delete at 0\n            newBoard[curAttempt.attempt][curAttempt.letterPos] = \"\"\n            setBoard(newBoard)\n        }\n        else if (keyValue == \"Delete\" && curAttempt.letterPos!=0){\n            //Deleteing any other time\n            newBoard[curAttempt.attempt][curAttempt.letterPos] = \"\"\n            setCurrAttempt({...curAttempt, letterPos:curAttempt.letterPos-1});\n            setBoard(newBoard);\n        }\n        else if(keyValue == \"Enter\" && curAttempt.letterPos!=5){\n            // Not a complete word\n            return;\n        }\n        else if(keyValue == \"Enter\" && curAttempt.letterPos==5){\n            // Makeing a guess\n            setCurrAttempt({attempt: curAttempt.attempt+1, letterPos:0});\n            setBoard(newBoard);\n            // need to check the guess \n        }\n        else if(keyValue != \"Enter\" && curAttempt.letterPos==5){\n            // Fully Spelt Word\n            return;\n        }\n        else{\n            //Entering a new key \n            newBoard[curAttempt.attempt][curAttempt.letterPos] = keyValue;\n            setCurrAttempt({...curAttempt, letterPos:curAttempt.letterPos+1});\n            setBoard(newBoard)\n        }\n    }\n    if(attemptValue < curAttempt.attempt){\n        if(word.word[letterPos]===keyValue){\n            return (<button className= \"key\" id = {bigKey && \"big\" && \"correct\"} onClick={selector}>{keyValue}</button>)\n        }\n        else if(word.word.slice(letterPos).includes(\"\"+keyValue)){\n            return (<button className= \"key\" id = {bigKey && \"big\" && \"almost\"} onClick={selector}>{keyValue}</button>)\n        }\n        else if(word.word.slice(letterPos).includes(\"\"+keyValue)){\n            return (<button className= \"key\" id = {bigKey && \"big\" && \"error\"} onClick={selector}>{keyValue}</button>)\n        }\n\n\n    return (<button className= \"key\" id = {bigKey && \"big\"} onClick={selector}>{keyValue}</button>)\n\n}\n}\nexport default Key;"],"mappings":"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"},"metadata":{},"sourceType":"module"}