{"ast":null,"code":"var _jsxFileName = \"/Users/magana272/Desktop/pp/wordle/my-app/src/Component/Letter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { AppContext } from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Letter(_ref) {\n  _s();\n\n  let {\n    letterPos,\n    attemptValue\n  } = _ref;\n  const {\n    board,\n    curAttempt,\n    word,\n    correct,\n    almost,\n    error\n  } = useContext(AppContext);\n  const letter = board[attemptValue][letterPos]; // Make tupils if you get it right ... :+)\n  // ALL 5 letter words from Taylor Swift song and Say Anything \n\n  if (attemptValue < curAttempt.attempt) {\n    if (word.word[letterPos] === letter) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"letter\",\n        id: \"correct\",\n        children: [\" \", \"ðŸŒ·\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 20\n      }, this);\n    } else if (word.word.includes(\"\" + letter)) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"letter\",\n        id: \"almost\",\n        children: [\" \", letter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"letter\",\n        id: \"error\",\n        children: [\" \", letter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex p-2 letter\",\n    id: true,\n    children: [\" \", letter]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Letter, \"t8s6HZ2ccwsaiZYw84f/H1iVZZg=\");\n\n_c = Letter;\nexport default Letter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Letter\");","map":{"version":3,"names":["React","useContext","AppContext","Letter","letterPos","attemptValue","board","curAttempt","word","correct","almost","error","letter","attempt","includes"],"sources":["/Users/magana272/Desktop/pp/wordle/my-app/src/Component/Letter.js"],"sourcesContent":["import React, {useContext} from 'react';\nimport {AppContext} from \"../App\";\nfunction Letter({letterPos, attemptValue}){\n    const {board, curAttempt, word, correct, almost, error} = useContext(AppContext); \n    const letter = board[attemptValue][letterPos];\n    // Make tupils if you get it right ... :+)\n    // ALL 5 letter words from Taylor Swift song and Say Anything \n\n    if(attemptValue < curAttempt.attempt){\n        if(word.word[letterPos]===letter){\n            return <div className =\"letter\" id= \"correct\"> {\"ðŸŒ·\"}</div>\n        }\n        else if(word.word.includes(\"\"+letter)){\n            return <div className =\"letter\" id= \"almost\"> {letter}</div>\n        }\n        else{\n            return <div className =\"letter\" id= \"error\"> {letter}</div>\n        }\n    }\n    return <div className =\"d-flex p-2 letter\" id> {letter}</div>\n\n}\nexport default Letter;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,UAAR,QAAyB,QAAzB;;;AACA,SAASC,MAAT,OAA0C;EAAA;;EAAA,IAA1B;IAACC,SAAD;IAAYC;EAAZ,CAA0B;EACtC,MAAM;IAACC,KAAD;IAAQC,UAAR;IAAoBC,IAApB;IAA0BC,OAA1B;IAAmCC,MAAnC;IAA2CC;EAA3C,IAAoDV,UAAU,CAACC,UAAD,CAApE;EACA,MAAMU,MAAM,GAAGN,KAAK,CAACD,YAAD,CAAL,CAAoBD,SAApB,CAAf,CAFsC,CAGtC;EACA;;EAEA,IAAGC,YAAY,GAAGE,UAAU,CAACM,OAA7B,EAAqC;IACjC,IAAGL,IAAI,CAACA,IAAL,CAAUJ,SAAV,MAAuBQ,MAA1B,EAAiC;MAC7B,oBAAO;QAAK,SAAS,EAAE,QAAhB;QAAyB,EAAE,EAAE,SAA7B;QAAA,gBAAyC,IAAzC;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACH,CAFD,MAGK,IAAGJ,IAAI,CAACA,IAAL,CAAUM,QAAV,CAAmB,KAAGF,MAAtB,CAAH,EAAiC;MAClC,oBAAO;QAAK,SAAS,EAAE,QAAhB;QAAyB,EAAE,EAAE,QAA7B;QAAA,gBAAwCA,MAAxC;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACH,CAFI,MAGD;MACA,oBAAO;QAAK,SAAS,EAAE,QAAhB;QAAyB,EAAE,EAAE,OAA7B;QAAA,gBAAuCA,MAAvC;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACH;EACJ;;EACD,oBAAO;IAAK,SAAS,EAAE,mBAAhB;IAAoC,EAAE,MAAtC;IAAA,gBAAyCA,MAAzC;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AAEH;;GAnBQT,M;;KAAAA,M;AAoBT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}